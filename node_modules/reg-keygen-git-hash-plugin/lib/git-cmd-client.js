"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitCmdClient = void 0;
const child_process_1 = require("child_process");
const shell_escape_1 = __importDefault(require("shell-escape"));
class GitCmdClient {
    constructor() {
        this._revParseHash = {};
    }
    currentName() {
        return (0, child_process_1.execSync)('git branch | grep "^\\*" | cut -b 3-', { encoding: "utf8" });
    }
    revParse(currentName) {
        if (!this._revParseHash[currentName]) {
            this._revParseHash[currentName] = (0, child_process_1.execSync)(`git rev-parse "${currentName}"`, { encoding: "utf8" });
        }
        return this._revParseHash[currentName];
    }
    branches() {
        return (0, child_process_1.execSync)("git branch -a", { encoding: "utf8" });
    }
    containedBranches(hash) {
        return (0, child_process_1.execSync)((0, shell_escape_1.default)(["git", "branch", "-a", "--contains", hash]), { encoding: "utf8" });
    }
    logTime(hash) {
        return (0, child_process_1.execSync)((0, shell_escape_1.default)(["git", "log", "--pretty=%ci", "-n", "1", hash]), { encoding: "utf8" });
    }
    logBetween(a, b) {
        return (0, child_process_1.execSync)((0, shell_escape_1.default)(["git", "log", "--oneline", `${a}..${b}`]), { encoding: "utf8" });
    }
    logGraph() {
        return (0, child_process_1.execSync)('git log -n 300 --graph --pretty=format:"%h %p"', { encoding: "utf8" });
    }
    mergeBase(a, b) {
        return (0, child_process_1.execSync)((0, shell_escape_1.default)(["git", "merge-base", "-a", a, b]), { encoding: "utf8" });
    }
}
exports.GitCmdClient = GitCmdClient;
//# sourceMappingURL=git-cmd-client.js.map