"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractPublisher = void 0;
const path_1 = __importDefault(require("path"));
const mime_types_1 = require("mime-types");
const glob_1 = __importDefault(require("glob"));
const lodash_1 = __importDefault(require("lodash"));
const CONCURRENCY_SIZE = 50;
const DEFAULT_PATTERN = "**/*.{html,js,wasm,png,json,jpeg,jpg,tiff,bmp,gif}";
class AbstractPublisher {
    constructor() {
        this.noEmit = false;
    }
    createList() {
        return new Promise((resolve, reject) => {
            (0, glob_1.default)(this.getLocalGlobPattern() || DEFAULT_PATTERN, {
                cwd: this.getWorkingDirs().base,
                nodir: true,
            }, (err, list) => {
                if (err) {
                    return reject(err);
                }
                resolve(list);
            });
        }).then(files => {
            return files
                .map(f => {
                const mimeType = (0, mime_types_1.lookup)(f) || "unknown";
                return {
                    path: f,
                    absPath: path_1.default.resolve(this.getWorkingDirs().base, f),
                    mimeType,
                };
            })
                .filter(item => !!item.mimeType);
        });
    }
    resolveInBucket(key) {
        if (this.getBucketRootDir()) {
            return this.getBucketRootDir() + "/" + key;
        }
        else {
            return key;
        }
    }
    fetchInternal(key) {
        if (this.noEmit)
            return Promise.resolve();
        const actualPrefix = `${this.resolveInBucket(key)}/${path_1.default.basename(this.getWorkingDirs().actualDir)}`;
        const progress = this.logger.getProgressBar();
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const contents = [];
            let nextMarker = "";
            do {
                let result;
                try {
                    result = yield this.listItems(nextMarker, actualPrefix);
                    const curContents = result.contents || [];
                    if (curContents.length > 0) {
                        Array.prototype.push.apply(contents, curContents);
                    }
                    nextMarker = result.nextMarker;
                }
                catch (e) {
                    nextMarker = "";
                    reject(e);
                }
            } while (nextMarker);
            resolve(contents);
        }))
            .then(contents => {
            if (contents.length) {
                progress.start(contents.length, 0);
                this.logger.info(`Download ${contents.length} files from ${this.logger.colors.magenta(this.getBucketName())}.`);
            }
            return contents.map(c => {
                const suffix = c.key ? c.key.replace(new RegExp(`^${actualPrefix}\/`), "") : "";
                return {
                    path: suffix,
                    absPath: path_1.default.join(this.getWorkingDirs().expectedDir, suffix),
                    mimeType: (0, mime_types_1.lookup)(suffix),
                };
            });
        })
            .then(items => lodash_1.default.chunk(items, CONCURRENCY_SIZE))
            .then(chunks => {
            return chunks.reduce((acc, chunk) => {
                return acc.then(list => {
                    return Promise.all(chunk.map(item => {
                        const remotePath = `${this.resolveInBucket(key)}/${path_1.default.basename(this.getWorkingDirs().actualDir)}/${item.path}`;
                        return this.downloadItem({ remotePath, key }, item).then(fi => {
                            progress.increment(1);
                            return fi;
                        });
                    })).then(items => [...list, ...items]);
                });
            }, Promise.resolve([]));
        })
            .then(result => {
            progress.stop();
            return result;
        });
    }
    publishInternal(key) {
        const progress = this.logger.getProgressBar();
        return this.createList()
            .then(list => {
            if (list.length) {
                progress.start(list.length, 0);
                if (!this.noEmit) {
                    this.logger.info(`Upload ${list.length} files to ${this.logger.colors.magenta(this.getBucketName())}.`);
                }
                else {
                    this.logger.info(`There are ${list.length} files to publish`);
                }
            }
            return lodash_1.default.chunk(list, CONCURRENCY_SIZE);
        })
            .then(chunks => {
            return chunks.reduce((acc, chunk) => {
                return acc.then(list => {
                    return Promise.all(chunk.map(item => {
                        if (this.noEmit)
                            return Promise.resolve(item);
                        return this.uploadItem(this.resolveInBucket(key), item).then(fi => {
                            progress.increment(1);
                            return fi;
                        });
                    })).then(items => [...list, ...items]);
                });
            }, Promise.resolve([]));
        })
            .then(items => {
            const indexFile = items.find(item => item.path.endsWith("index.html"));
            return { items, indexFile };
        })
            .then(result => {
            progress.stop();
            return result;
        });
    }
}
exports.AbstractPublisher = AbstractPublisher;
//# sourceMappingURL=cloud-storage-util.js.map