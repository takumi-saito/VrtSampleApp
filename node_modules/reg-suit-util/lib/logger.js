"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = exports.RegLogger = void 0;
const chalk_1 = require("chalk");
const cli_progress_1 = require("cli-progress");
const cli_spinner_1 = require("cli-spinner");
const noopSpinner = {
    start: () => { },
    stop: () => { },
};
const noopProgressBar = {
    start: (_x, _y) => { },
    update: (_x) => { },
    increment: (_x) => { },
    stop: () => { },
};
class RegLogger {
    constructor(_category = "reg-suit") {
        this._category = _category;
        this._chalk = new chalk_1.Instance({ level: 1 });
        this._level = "info";
    }
    fork(newCategory) {
        const l = new RegLogger(newCategory);
        l.setLevel(this._level);
        return l;
    }
    setLevel(v) {
        this._level = v;
    }
    get colors() {
        return this._chalk;
    }
    set colors(_v) {
        return;
    }
    getSpinner(msg) {
        if (this._level === "silent")
            return noopSpinner;
        const spinner = new cli_spinner_1.Spinner(msg);
        spinner.setSpinnerString(3);
        spinner.stop = spinner.stop.bind(spinner, true);
        return spinner;
    }
    getProgressBar() {
        if (this._level === "silent")
            return noopProgressBar;
        const bar = new cli_progress_1.Bar({}, cli_progress_1.Presets.rect);
        return bar;
    }
    info(msg) {
        if (this._level !== "silent") {
            // eslint-disable-next-line no-console
            console.log(this._prefix + this.colors.green("info ") + msg);
        }
    }
    warn(msg) {
        if (this._level !== "silent") {
            // eslint-disable-next-line no-console
            console.warn(this._prefix + this.colors.yellow("warn ") + msg);
        }
    }
    error(obj) {
        if (this._level !== "silent") {
            if (typeof obj === "string") {
                // eslint-disable-next-line no-console
                console.error(this._prefix + this.colors.red("error ") + obj);
            }
            else {
                // eslint-disable-next-line no-console
                console.error(this._prefix + this.colors.red("error "), obj);
            }
        }
    }
    verbose(msg, ...objects) {
        if (this._level === "verbose") {
            // eslint-disable-next-line no-console
            console.log(this._prefix + this.colors.green("debug ") + msg);
            if (objects && objects.length) {
                objects.forEach(obj => {
                    // eslint-disable-next-line no-console
                    console.log(this.colors.gray(JSON.stringify(obj, null, 2)));
                });
            }
        }
    }
    get _prefix() {
        return `[${this._category}] `;
    }
}
exports.RegLogger = RegLogger;
function createLogger(category) {
    return new RegLogger(category);
}
exports.createLogger = createLogger;
//# sourceMappingURL=logger.js.map