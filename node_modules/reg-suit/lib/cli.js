#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const yargs_1 = __importDefault(require("yargs"));
const init_1 = __importDefault(require("./commands/init"));
const install_1 = __importDefault(require("./commands/install"));
const prepare_1 = __importDefault(require("./commands/prepare"));
const run_1 = __importDefault(require("./commands/run"));
const sync_expected_1 = __importDefault(require("./commands/sync-expected"));
const compare_1 = __importDefault(require("./commands/compare"));
const publish_1 = __importDefault(require("./commands/publish"));
const get_reg_core_1 = __importDefault(require("./get-reg-core"));
const version = require(path_1.default.resolve(__dirname, "../package.json")).version;
function createOptions() {
    yargs_1.default
        .usage("Usage: $0 [options] <command>")
        .help()
        .option("h", { alias: "help", group: "Global Options:" })
        .option("c", {
        alias: "config",
        desc: "Configuration file path.",
        default: "regconfig.json",
        group: "Global Options:",
    })
        .option("t", {
        alias: "test",
        desc: "Perform a trial with no changes.",
        boolean: true,
        default: false,
        group: "Global Options:",
    })
        .option("v", {
        alias: "verbose",
        desc: "Display debug logging messages.",
        boolean: true,
        default: false,
        group: "Global Options:",
    })
        .option("q", {
        alias: "quiet",
        desc: "Suppress logging messages",
        boolean: true,
        default: false,
        group: "Global Options:",
    })
        .option("version", { desc: "Print version number.", group: "Global Options:" })
        .version(version)
        .boolean("use-dev-core") // This option is used for cli developers only, so does not need help.
        .command("init", "Install and set up reg-suit and plugins into your project.", {
        useYarn: { desc: "Whether to use yarn as npm client.", boolean: true, default: false },
        useYarnWs: { desc: "Whether to use yarn workspace.", boolean: true, default: false },
    })
        .command("prepare", "Configure installed plugin", {
        p: { alias: "plugin", array: true, desc: "Plugin name(s) you want to set up(e.g. slack-notify)." },
    })
        .command("run", "Run all procedure regression testing.")
        .command("sync-expected", "Fetch expected images into working directory.")
        .command("compare", "Compare actual images with expected images and creates report.")
        .command("publish", "Publish the latest comparison result in working directory.", {
        n: { alias: "notification", desc: "Send notifications with publishing", boolean: true, default: false },
    })
        .wrap(120)
        .locale("en");
    const { config, verbose, quiet, test, useYarn, useYarnWs, plugin, useDevCore, notification } = yargs_1.default.argv;
    const command = yargs_1.default.argv._[0];
    const logLevel = verbose ? "verbose" : quiet ? "silent" : "info";
    const npmClient = useYarn || useYarnWs ? (useYarnWs ? "yarn workspace" : "yarn") : "npm";
    const plugins = (plugin || []);
    const noInstallCore = !!useDevCore;
    return {
        command,
        logLevel,
        configFileName: config,
        noEmit: test,
        npmClient,
        plugins,
        noInstallCore,
        notification,
    };
}
function cli() {
    const options = createOptions();
    const core = (0, get_reg_core_1.default)(options);
    core.logger.info(`${core.logger.colors.magenta("version")}: ${version}`);
    if (options.command === "run" || options.command === "run-all") {
        return (0, run_1.default)(options);
    }
    else if (options.command === "sync-expected") {
        return (0, sync_expected_1.default)(options);
    }
    else if (options.command === "compare") {
        return (0, compare_1.default)(options);
    }
    else if (options.command === "publish") {
        return (0, publish_1.default)(options);
    }
    else if (options.command === "install") {
        return (0, install_1.default)(options);
    }
    else if (options.command === "prepare") {
        return (0, prepare_1.default)(options);
    }
    else if (options.command === "init") {
        return (0, init_1.default)(options);
    }
    else {
        yargs_1.default.showHelp();
        return Promise.resolve();
    }
}
cli()
    .then(() => process.exit(0))
    .catch((reason) => {
    // eslint-disable-next-line no-console
    console.error(reason);
    process.exit(1);
});
//# sourceMappingURL=cli.js.map