"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const inquirer = __importStar(require("inquirer"));
const package_util_1 = __importDefault(require("../package-util"));
const get_reg_core_1 = __importDefault(require("../get-reg-core"));
const WELL_KNOWN_PLUGINS = require(path.join(__dirname, "..", "..", "well-known-plugins.json"));
function install(options) {
    const core = (0, get_reg_core_1.default)(options);
    return inquirer
        .prompt([
        {
            type: "checkbox",
            name: "pluginNamesToInstall",
            message: "Plugin(s) to install (bold: recommended)",
            choices: WELL_KNOWN_PLUGINS.map(d => {
                return {
                    name: d.metadata.recommended
                        ? core.logger.colors.bold(` ${d.name} : ${d.description}`)
                        : ` ${d.name} : ${d.description}`,
                    value: d.name,
                };
            }),
            default: WELL_KNOWN_PLUGINS.filter(d => !!d.metadata.recommended).map(d => d.name),
        },
    ])
        .then(({ pluginNamesToInstall }) => pluginNamesToInstall)
        .then(pluginNamesToInstall => {
        const isCliInstalled = package_util_1.default.checkInstalledLocalCli();
        if (!isCliInstalled) {
            core.logger.info("This project does not have local installed reg-suit, so install it.");
        }
        if (options.noEmit)
            return Promise.resolve([]);
        core.logger.info("Install dependencies to the local directory. This procedure takes some minutes, please wait.");
        const spinner = core.logger.getSpinner(`installing dependencies with ${core.logger.colors.green(options.npmClient)}...`);
        spinner.start();
        if (!isCliInstalled) {
            return package_util_1.default.installPluginAndCli(options.npmClient, pluginNamesToInstall).then(packages => {
                spinner.stop();
                core.logger.verbose(packages.join(", "));
                return packages;
            });
        }
        else {
            return package_util_1.default.installPackages(options.npmClient, pluginNamesToInstall).then(packages => {
                spinner.stop();
                core.logger.verbose(packages.join(", "));
                return packages;
            });
        }
    });
}
exports.default = install;
//# sourceMappingURL=install.js.map