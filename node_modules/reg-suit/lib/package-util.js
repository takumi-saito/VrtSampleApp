"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageUtil = exports.PLUGIN_NAME_REGEXP = void 0;
const child_process_1 = __importDefault(require("child_process"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const reg_suit_util_1 = require("reg-suit-util");
exports.PLUGIN_NAME_REGEXP = /^reg-.*-plugin$/;
const CLI_MODULE_ID = require(path_1.default.join(__dirname, "..", "package.json"))["name"];
class PackageUtil {
    installPackages(client, packageNames) {
        if (!packageNames.length)
            return Promise.resolve([]);
        const cliArguments = [];
        if (client === "npm") {
            cliArguments.push("npm");
            cliArguments.push("install");
            cliArguments.push("-D");
        }
        else if (client === "yarn") {
            cliArguments.push("yarn");
            cliArguments.push("add");
            cliArguments.push("-D");
        }
        else if (client === "yarn workspace") {
            cliArguments.push("yarn");
            cliArguments.push("add");
            cliArguments.push("-D");
            cliArguments.push("-W");
        }
        const args = [...cliArguments, ...packageNames];
        return new Promise((resolve, reject) => {
            child_process_1.default.exec(args.join(" "), error => {
                if (error) {
                    return reject(error);
                }
                return resolve(packageNames);
            });
        });
    }
    installPluginAndCli(client, pluginNames) {
        return this.installPackages(client, [CLI_MODULE_ID, ...pluginNames]);
    }
    checkInstalled(pkgName) {
        const prjDir = reg_suit_util_1.fsUtil.prjRootDir();
        try {
            return path_1.default.dirname(require.resolve(path_1.default.join(prjDir, "node_modules", pkgName, "package.json")));
        }
        catch (e) {
            return null;
        }
    }
    checkInstalledLocalCore() {
        return this.checkInstalled("reg-suit-core");
    }
    checkInstalledLocalCli() {
        return this.checkInstalled(CLI_MODULE_ID);
    }
    getInstalledPlugins() {
        const cwd = process.cwd();
        try {
            const packageJson = JSON.parse(fs_1.default.readFileSync(path_1.default.join(cwd, "package.json"), "utf8"));
            let result = [];
            if (packageJson["dependencies"]) {
                result = [...result, ...Object.keys(packageJson["dependencies"])];
            }
            if (packageJson["devDependencies"]) {
                result = [...result, ...Object.keys(packageJson["devDependencies"])];
            }
            return result.filter(dep => exports.PLUGIN_NAME_REGEXP.test(dep));
        }
        catch (e) {
            return [];
        }
    }
}
exports.PackageUtil = PackageUtil;
const packageUtil = new PackageUtil();
exports.default = packageUtil;
//# sourceMappingURL=package-util.js.map